---
- name: Check if playbook executed previously
  hosts: dev_db_group_2_B_nonITAR
  gather_facts: false

  tasks:
    - name: Check if playbook has been executed
      set_fact:
        playbook_executed: "{{ ansible_local.playbook_status.status | default('not_executed') }}"
      tags: ['status']
      
- name: Stop Oracle Databases
  hosts: dev_db_group_2_B_nonITAR
  gather_facts: false
  become: no
  vars:
    ansible_user: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
    oracle_bin: "/home/{{ ansible_user }}/admin/bin"
    oracle_bin: "/home/{{ ansible_user }}/admin/log"
    pmon_list_file: "/edm/DONOTDELETE/ansible_linux_patching/pmon_{{ inventory_hostname }}.lst"
    backups_list_file: "/edm/DONOTDELETE/ansible_linux_patching/backups_{{ inventory_hostname }}.lst"

  tasks:
    - name: Check if playbook has been executed
      set_fact:
        playbook_executed: "{{ ansible_local.playbook_status.status | default('not_executed') }}"
      tags: ['status']

    - name: Display information
      debug:
        msg: "{{ item }}"
      loop:
        - "This will stop all DB on this node {{ inventory_hostname }}"
        - "Please make ASIN and blackout is sent"
      tags: ['display']
      
    - name: Putting Server in blackout
      command: /edm/DONOTDELETE/ansible_linux_patching/start_blackout.sh {{ inventory_hostname }}"
      args:
        chdir: "{{ oracle_bin }}"
      when: playbook_executed == 'not_executed'
      tags: ['blackout']

    - name: Sleep for 2 minutes
      pause:
        seconds: 120
      when: playbook_executed == 'not_executed'
      tags: ['blackout']

    - name: Verify blackout set in front end
      debug:
        msg: "Verify blackout set in front end"
      when: playbook_executed == 'not_executed'
      tags: ['blackout']

    - name: Create pmon_list_file
      command: "ps -ef | grep ora_pmon| grep -v grep | awk '{ print $NF }'| awk -F_ '{ print $3 }' > {{ pmon_list_file }}"
      args:
        chdir: "/edm/DONOTDELETE/ansible_linux_patching/"
      tags: ['pmon_list']
      register: pmon_list_result

    - name: Run stop_db.sh for each database
      command: "{{ oracle_bin }}/runjob -p {{ oracle_bin }}/stop_db.sh {{ item }}"
      args:
        chdir: "{{ oracle_bin }}"
      loop: "{{ lookup('file', pmon_list_file).split('\n') }}"
      tags: ['stop_db']
      register: stop_db_result

- name: Record task execution status
  hosts: your_oracle_group
  gather_facts: yes
  tasks:
    - name: Record pmon_list task execution status
      set_fact:
        pmon_list_executed: "{{ pmon_list_result.rc == 0 }}"
      when: playbook_executed == 'not_executed'
      tags: ['status']

    - name: Record stop_db task execution status
      set_fact:
        stop_db_executed: "{{ stop_db_result.rc == 0 }}"
      when: playbook_executed == 'not_executed'
      tags: ['status']
    
    # Add similar tasks for other tasks as needed

    - name: Display completion message
      debug:
        msg: "Playbook execution completed."
      when: playbook_executed == 'not_executed'
      tags: ['end']
